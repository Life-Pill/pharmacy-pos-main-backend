name: Spring Boot Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Ensure the token has permission to write releases

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for SonarCloud analysis

      # Step 2: Set up JDK 17 for Spring Boot
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'  # You can change this to any distribution you prefer

      # Step 3: Cache SonarCloud packages (optional, if using SonarCloud)
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Maven packages for faster builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 5: Build and analyze the code with Maven
      - name: Build and analyze the Spring Boot project
        working-directory: pos-system  # Adjust if your backend is in a subdirectory
        run: mvn -B clean verify -DskipTests

      # Step 7: Create a new GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.sha }}  # Use commit SHA as the tag name
          release_name: "Release ${{ github.sha }}"  # Use commit SHA as the release name
          draft: false
          prerelease: false
          body: "Automated release created by GitHub Actions"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_2 }}  # Using the renamed token 'TOKEN_2'

      # Step 8: Upload build artifacts to the release
      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/*.jar  # Adjust the path to the artifact you want to upload
          asset_name: your-springboot-app.jar  # Name the uploaded file
          asset_content_type: application/java-archive
